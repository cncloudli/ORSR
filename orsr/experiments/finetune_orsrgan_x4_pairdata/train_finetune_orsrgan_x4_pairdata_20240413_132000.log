2024-04-13 13:20:00,464 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 2.2.1+cu121
	TorchVision: 0.17.1+cpu
2024-04-13 13:20:00,465 INFO: 
  name: finetune_orsrgam_x4_pairdata
  model_type: RealESRGANModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  l1_gt_usm: True
  percep_gt_usm: True
  gan_gt_usm: False
  high_order_degradation: False
  datasets:[
    train:[
      name: finetune_pairdata
      type: RealESRGANPairedDataset
      dataroot_gt: datasets/finetune_pairdata/gt
      dataroot_lq: datasets/finetune_pairdata/lq
      meta_info: datasets/finetune_pairdata/meta_info/meta_info_pair.txt
      io_backend:[
        type: disk
      ]
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 5
      batch_size_per_gpu: 12
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
  ]
  network_d:[
    type: UNetDiscriminatorSN
    num_in_ch: 3
    num_feat: 64
    skip_connection: True
  ]
  path:[
    pretrain_network_g: experiments/train_orsrgan_x4/models/net_g_latest.pth
    param_key_g: params_ema
    strict_load_g: True
    pretrain_network_d: experiments/train_orsrgan_x4/models/net_d_latest.pth
    param_key_d: params
    strict_load_d: True
    resume_state: None
    experiments_root: D:\fp\ORSR\experiments\finetune_orsrgam_x4_pairdata
    models: D:\fp\ORSR\experiments\finetune_orsrgam_x4_pairdata\models
    training_states: D:\fp\ORSR\experiments\finetune_orsrgam_x4_pairdata\training_states
    log: D:\fp\ORSR\experiments\finetune_orsrgam_x4_pairdata
    visualization: D:\fp\ORSR\experiments\finetune_orsrgam_x4_pairdata\visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    optim_d:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [10000]
      gamma: 0.5
    ]
    total_iter: 10000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
    perceptual_opt:[
      type: PerceptualLoss
      layer_weights:[
        conv1_2: 0.1
        conv2_2: 0.1
        conv3_4: 1
        conv4_4: 1
        conv5_4: 1
      ]
      vgg_type: vgg19
      use_input_norm: True
      perceptual_weight: 1.0
      style_weight: 0
      range_norm: False
      criterion: l1
    ]
    gan_opt:[
      type: GANLoss
      gan_type: vanilla
      real_label_val: 1.0
      fake_label_val: 0.0
      loss_weight: 0.1
    ]
    net_d_iters: 1
    net_d_init_iters: 0
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: False
  is_train: True
  root_path: D:\fp\ORSR

2024-04-13 13:20:00,630 INFO: Dataset [RealESRGANPairedDataset] - finetune_pairdata is built.
2024-04-13 13:20:00,630 INFO: Training statistics:
	Number of train images: 100
	Dataset enlarge ratio: 1
	Batch size per gpu: 12
	World size (gpu number): 1
	Require iter number per epoch: 9
	Total epochs: 1112; iters: 10000.
2024-04-13 13:20:00,862 INFO: Network [RRDBNet] is created.
2024-04-13 13:20:01,026 INFO: Network: RRDBNet, with parameters: 16,697,987
2024-04-13 13:20:01,027 INFO: RRDBNet(
  (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2024-04-13 13:20:01,144 INFO: Loading RRDBNet model from experiments/train_orsrgan_x4/models/net_g_latest.pth, with param key: [params_ema].
2024-04-13 13:20:01,250 INFO: Use Exponential Moving Average with decay: 0.999
2024-04-13 13:20:01,558 INFO: Network [RRDBNet] is created.
2024-04-13 13:20:01,669 INFO: Loading RRDBNet model from experiments/train_orsrgan_x4/models/net_g_latest.pth, with param key: [params_ema].
2024-04-13 13:20:01,832 INFO: Network [UNetDiscriminatorSN] is created.
2024-04-13 13:20:01,839 INFO: Network: UNetDiscriminatorSN, with parameters: 4,376,897
2024-04-13 13:20:01,840 INFO: UNetDiscriminatorSN(
  (conv0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv1): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv2): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv3): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv4): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv5): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv6): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv7): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv9): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
)
2024-04-13 13:20:01,857 INFO: Loading UNetDiscriminatorSN model from experiments/train_orsrgan_x4/models/net_d_latest.pth, with param key: [params].
2024-04-13 13:20:01,868 INFO: Loss [L1Loss] is created.
2024-04-13 13:20:04,002 INFO: Loss [PerceptualLoss] is created.
2024-04-13 13:20:04,020 INFO: Loss [GANLoss] is created.
2024-04-13 13:20:04,053 INFO: Model [RealESRGANModel] is created.
2024-04-13 13:20:17,164 INFO: Start training from epoch: 0, iter: 0
2024-04-13 14:30:31,424 INFO: [finet..][epoch: 12, iter:     100, lr:(1.000e-04,)] [eta: 4 days, 12:16:37, time (data): 42.142 (2.350)] l_g_pix: 2.7742e-02 l_g_percep: 6.1001e+00 l_g_gan: 3.6511e-01 l_d_real: 1.0247e-01 out_d_real: 6.0896e+00 l_d_fake: 1.5016e-01 out_d_fake: -3.4999e+00 
2024-04-13 15:38:01,586 INFO: [finet..][epoch: 24, iter:     200, lr:(1.000e-04,)] [eta: 4 days, 12:42:20, time (data): 41.322 (2.271)] l_g_pix: 6.1905e-02 l_g_percep: 1.0174e+01 l_g_gan: 4.7007e-01 l_d_real: 5.9912e-02 out_d_real: 8.5724e+00 l_d_fake: 4.7133e-02 out_d_fake: -4.6533e+00 
2024-04-13 16:45:00,075 INFO: [finet..][epoch: 37, iter:     300, lr:(1.000e-04,)] [eta: 4 days, 11:49:06, time (data): 40.008 (2.208)] l_g_pix: 2.5070e-02 l_g_percep: 5.2816e+00 l_g_gan: 3.9132e-01 l_d_real: 2.8167e-01 out_d_real: 5.4142e+00 l_d_fake: 7.9017e-02 out_d_fake: -3.8339e+00 
2024-04-13 17:51:12,605 INFO: [finet..][epoch: 49, iter:     400, lr:(1.000e-04,)] [eta: 4 days, 10:30:40, time (data): 39.866 (2.186)] l_g_pix: 4.6588e-02 l_g_percep: 9.2424e+00 l_g_gan: 3.9199e-01 l_d_real: 2.0191e-01 out_d_real: 7.2197e+00 l_d_fake: 1.0353e-01 out_d_fake: -3.8155e+00 
2024-04-13 19:05:19,006 INFO: [finet..][epoch: 62, iter:     500, lr:(1.000e-04,)] [eta: 4 days, 11:46:52, time (data): 44.420 (2.272)] l_g_pix: 3.8646e-02 l_g_percep: 7.9886e+00 l_g_gan: 4.1622e-01 l_d_real: 7.1087e-02 out_d_real: 6.9431e+00 l_d_fake: 7.8262e-02 out_d_fake: -4.0837e+00 
2024-04-13 20:16:24,031 INFO: [finet..][epoch: 74, iter:     600, lr:(1.000e-04,)] [eta: 4 days, 11:25:46, time (data): 43.526 (2.244)] l_g_pix: 2.8047e-02 l_g_percep: 5.8916e+00 l_g_gan: 2.8554e-01 l_d_real: 2.2605e-01 out_d_real: 4.7349e+00 l_d_fake: 1.8498e-01 out_d_fake: -2.6697e+00 
2024-04-13 21:24:29,521 INFO: [finet..][epoch: 87, iter:     700, lr:(1.000e-04,)] [eta: 4 days, 10:10:43, time (data): 40.721 (2.249)] l_g_pix: 4.2443e-02 l_g_percep: 7.5735e+00 l_g_gan: 2.7218e-01 l_d_real: 5.0873e-02 out_d_real: 6.4644e+00 l_d_fake: 3.2929e-01 out_d_fake: -2.3923e+00 
2024-04-13 22:32:10,131 INFO: [finet..][epoch: 99, iter:     800, lr:(1.000e-04,)] [eta: 4 days, 8:52:39, time (data): 40.663 (2.214)] l_g_pix: 3.6091e-02 l_g_percep: 7.2688e+00 l_g_gan: 3.2045e-01 l_d_real: 2.5675e-01 out_d_real: 3.4887e+00 l_d_fake: 2.4523e-01 out_d_fake: -2.9591e+00 
2024-04-13 23:42:20,256 INFO: [finet..][epoch:112, iter:     900, lr:(1.000e-04,)] [eta: 4 days, 8:02:02, time (data): 42.061 (2.323)] l_g_pix: 2.4943e-02 l_g_percep: 5.2892e+00 l_g_gan: 2.3934e-01 l_d_real: 1.9596e-01 out_d_real: 4.4559e+00 l_d_fake: 3.1715e-01 out_d_fake: -2.0763e+00 
2024-04-14 00:51:17,891 INFO: [finet..][epoch:124, iter:   1,000, lr:(1.000e-04,)] [eta: 4 days, 6:56:40, time (data): 41.711 (2.264)] l_g_pix: 3.4476e-02 l_g_percep: 6.7123e+00 l_g_gan: 3.1364e-01 l_d_real: 1.5038e-01 out_d_real: 5.1697e+00 l_d_fake: 1.8317e-01 out_d_fake: -2.9524e+00 
2024-04-14 02:00:03,778 INFO: [finet..][epoch:137, iter:   1,100, lr:(1.000e-04,)] [eta: 4 days, 5:49:04, time (data): 41.176 (2.322)] l_g_pix: 2.6104e-02 l_g_percep: 5.9824e+00 l_g_gan: 2.5890e-01 l_d_real: 8.3446e-02 out_d_real: 5.2874e+00 l_d_fake: 2.8847e-01 out_d_fake: -2.3004e+00 
2024-04-14 03:08:34,834 INFO: [finet..][epoch:149, iter:   1,200, lr:(1.000e-04,)] [eta: 4 days, 4:39:27, time (data): 41.143 (2.280)] l_g_pix: 3.4747e-02 l_g_percep: 6.9132e+00 l_g_gan: 3.0245e-01 l_d_real: 5.2986e-01 out_d_real: 2.3718e+00 l_d_fake: 2.8861e-01 out_d_fake: -2.7355e+00 
2024-04-14 04:17:30,058 INFO: [finet..][epoch:162, iter:   1,300, lr:(1.000e-04,)] [eta: 4 days, 3:32:42, time (data): 41.305 (2.388)] l_g_pix: 4.4472e-02 l_g_percep: 8.0457e+00 l_g_gan: 3.2250e-01 l_d_real: 1.1057e-01 out_d_real: 5.3951e+00 l_d_fake: 1.9340e-01 out_d_fake: -3.0308e+00 
2024-04-14 05:26:03,352 INFO: [finet..][epoch:174, iter:   1,400, lr:(1.000e-04,)] [eta: 4 days, 2:23:24, time (data): 41.216 (2.286)] l_g_pix: 2.4263e-02 l_g_percep: 5.5905e+00 l_g_gan: 2.5710e-01 l_d_real: 1.3357e-01 out_d_real: 4.1632e+00 l_d_fake: 2.1378e-01 out_d_fake: -2.3570e+00 
2024-04-14 06:34:59,767 INFO: [finet..][epoch:187, iter:   1,500, lr:(1.000e-04,)] [eta: 4 days, 1:16:23, time (data): 41.335 (2.337)] l_g_pix: 3.7196e-02 l_g_percep: 7.0604e+00 l_g_gan: 2.6457e-01 l_d_real: 9.5046e-02 out_d_real: 5.3802e+00 l_d_fake: 2.8429e-01 out_d_fake: -2.3605e+00 
2024-04-14 07:43:43,726 INFO: [finet..][epoch:199, iter:   1,600, lr:(1.000e-04,)] [eta: 4 days, 0:08:01, time (data): 41.286 (2.282)] l_g_pix: 5.3274e-02 l_g_percep: 8.2483e+00 l_g_gan: 3.3235e-01 l_d_real: 1.9087e-01 out_d_real: 4.3251e+00 l_d_fake: 1.7417e-01 out_d_fake: -3.1478e+00 
2024-04-14 08:52:47,969 INFO: [finet..][epoch:212, iter:   1,700, lr:(1.000e-04,)] [eta: 3 days, 23:01:17, time (data): 41.455 (2.373)] l_g_pix: 3.7711e-02 l_g_percep: 6.5816e+00 l_g_gan: 3.7654e-01 l_d_real: 1.6396e-01 out_d_real: 4.3035e+00 l_d_fake: 1.0287e-01 out_d_fake: -3.6614e+00 
2024-04-14 10:01:38,641 INFO: [finet..][epoch:224, iter:   1,800, lr:(1.000e-04,)] [eta: 3 days, 21:53:15, time (data): 41.378 (2.290)] l_g_pix: 2.9641e-02 l_g_percep: 7.0792e+00 l_g_gan: 3.7832e-01 l_d_real: 1.0563e-01 out_d_real: 5.5345e+00 l_d_fake: 1.0125e-01 out_d_fake: -3.6805e+00 
2024-04-14 11:10:52,086 INFO: [finet..][epoch:237, iter:   1,900, lr:(1.000e-04,)] [eta: 3 days, 20:46:45, time (data): 41.352 (2.235)] l_g_pix: 3.7656e-02 l_g_percep: 6.4452e+00 l_g_gan: 4.5341e-01 l_d_real: 3.6852e-01 out_d_real: 4.0553e+00 l_d_fake: 5.5531e-02 out_d_fake: -4.4784e+00 
2024-04-14 12:19:45,037 INFO: [finet..][epoch:249, iter:   2,000, lr:(1.000e-04,)] [eta: 3 days, 19:38:36, time (data): 41.340 (2.214)] l_g_pix: 3.7795e-02 l_g_percep: 7.5167e+00 l_g_gan: 3.2017e-01 l_d_real: 2.3072e-01 out_d_real: 4.0504e+00 l_d_fake: 1.9868e-01 out_d_fake: -3.0023e+00 
2024-04-14 13:28:49,759 INFO: [finet..][epoch:262, iter:   2,100, lr:(1.000e-04,)] [eta: 3 days, 18:31:08, time (data): 41.290 (2.201)] l_g_pix: 3.8631e-02 l_g_percep: 7.0390e+00 l_g_gan: 3.6459e-01 l_d_real: 1.7183e-01 out_d_real: 3.8757e+00 l_d_fake: 1.5980e-01 out_d_fake: -3.4847e+00 
2024-04-14 14:37:34,020 INFO: [finet..][epoch:274, iter:   2,200, lr:(1.000e-04,)] [eta: 3 days, 17:22:18, time (data): 41.265 (2.182)] l_g_pix: 4.3991e-02 l_g_percep: 8.0733e+00 l_g_gan: 3.7914e-01 l_d_real: 2.0153e-01 out_d_real: 4.6535e+00 l_d_fake: 1.0904e-01 out_d_fake: -3.6813e+00 
2024-04-14 15:46:38,819 INFO: [finet..][epoch:287, iter:   2,300, lr:(1.000e-04,)] [eta: 3 days, 16:14:38, time (data): 41.312 (2.244)] l_g_pix: 3.6202e-02 l_g_percep: 6.5299e+00 l_g_gan: 3.6390e-01 l_d_real: 1.6017e-01 out_d_real: 4.2973e+00 l_d_fake: 1.3366e-01 out_d_fake: -3.5046e+00 
2024-04-14 16:55:22,293 INFO: [finet..][epoch:299, iter:   2,400, lr:(1.000e-04,)] [eta: 3 days, 15:05:43, time (data): 41.271 (2.201)] l_g_pix: 3.2002e-02 l_g_percep: 6.3183e+00 l_g_gan: 3.5048e-01 l_d_real: 3.0790e-01 out_d_real: 4.2262e+00 l_d_fake: 1.4442e-01 out_d_fake: -3.3588e+00 
2024-04-14 18:04:27,430 INFO: [finet..][epoch:312, iter:   2,500, lr:(1.000e-04,)] [eta: 3 days, 13:57:54, time (data): 41.342 (2.273)] l_g_pix: 2.9501e-02 l_g_percep: 6.5638e+00 l_g_gan: 3.8310e-01 l_d_real: 1.7212e-01 out_d_real: 4.3481e+00 l_d_fake: 1.0928e-01 out_d_fake: -3.7212e+00 
2024-04-14 19:13:11,259 INFO: [finet..][epoch:324, iter:   2,600, lr:(1.000e-04,)] [eta: 3 days, 12:48:58, time (data): 41.287 (2.224)] l_g_pix: 3.1631e-02 l_g_percep: 6.6797e+00 l_g_gan: 3.4098e-01 l_d_real: 1.0668e-01 out_d_real: 5.3182e+00 l_d_fake: 2.0029e-01 out_d_fake: -3.2084e+00 
2024-04-14 20:22:16,997 INFO: [finet..][epoch:337, iter:   2,700, lr:(1.000e-04,)] [eta: 3 days, 11:41:03, time (data): 41.382 (2.332)] l_g_pix: 3.1445e-02 l_g_percep: 6.7952e+00 l_g_gan: 3.8393e-01 l_d_real: 2.3592e-01 out_d_real: 3.6878e+00 l_d_fake: 1.1614e-01 out_d_fake: -3.7228e+00 
2024-04-14 21:31:16,871 INFO: [finet..][epoch:349, iter:   2,800, lr:(1.000e-04,)] [eta: 3 days, 10:32:47, time (data): 41.391 (2.263)] l_g_pix: 3.0817e-02 l_g_percep: 6.1987e+00 l_g_gan: 3.7273e-01 l_d_real: 2.2144e-01 out_d_real: 4.8642e+00 l_d_fake: 1.3569e-01 out_d_fake: -3.5906e+00 
2024-04-14 22:42:16,256 INFO: [finet..][epoch:362, iter:   2,900, lr:(1.000e-04,)] [eta: 3 days, 9:29:21, time (data): 42.543 (2.389)] l_g_pix: 4.8594e-02 l_g_percep: 7.6515e+00 l_g_gan: 3.5615e-01 l_d_real: 1.8198e-01 out_d_real: 4.9093e+00 l_d_fake: 1.9617e-01 out_d_fake: -3.3635e+00 
2024-04-14 23:52:03,877 INFO: [finet..][epoch:374, iter:   3,000, lr:(1.000e-04,)] [eta: 3 days, 8:22:37, time (data): 42.185 (2.279)] l_g_pix: 4.0089e-02 l_g_percep: 6.6036e+00 l_g_gan: 3.9456e-01 l_d_real: 3.1408e-01 out_d_real: 3.7322e+00 l_d_fake: 1.2365e-01 out_d_fake: -3.8219e+00 
2024-04-15 01:02:14,875 INFO: [finet..][epoch:387, iter:   3,100, lr:(1.000e-04,)] [eta: 3 days, 7:16:34, time (data): 42.099 (2.384)] l_g_pix: 3.9262e-02 l_g_percep: 5.8702e+00 l_g_gan: 3.1937e-01 l_d_real: 3.1121e-01 out_d_real: 3.6166e+00 l_d_fake: 1.5457e-01 out_d_fake: -3.0381e+00 
2024-04-15 02:12:05,546 INFO: [finet..][epoch:399, iter:   3,200, lr:(1.000e-04,)] [eta: 3 days, 6:09:32, time (data): 41.995 (2.283)] l_g_pix: 5.0614e-02 l_g_percep: 8.8674e+00 l_g_gan: 2.6727e-01 l_d_real: 1.7580e-01 out_d_real: 4.8624e+00 l_d_fake: 3.4729e-01 out_d_fake: -2.3245e+00 
2024-04-15 03:22:19,561 INFO: [finet..][epoch:412, iter:   3,300, lr:(1.000e-04,)] [eta: 3 days, 5:03:07, time (data): 42.171 (2.420)] l_g_pix: 2.9342e-02 l_g_percep: 6.2470e+00 l_g_gan: 2.4510e-01 l_d_real: 2.5551e-01 out_d_real: 2.9799e+00 l_d_fake: 2.8397e-01 out_d_fake: -2.1664e+00 
2024-04-15 04:32:17,981 INFO: [finet..][epoch:424, iter:   3,400, lr:(1.000e-04,)] [eta: 3 days, 3:55:58, time (data): 42.070 (2.327)] l_g_pix: 3.8188e-02 l_g_percep: 7.3933e+00 l_g_gan: 3.0249e-01 l_d_real: 2.9371e-01 out_d_real: 3.7113e+00 l_d_fake: 2.2055e-01 out_d_fake: -2.8040e+00 
2024-04-15 05:42:39,243 INFO: [finet..][epoch:437, iter:   3,500, lr:(1.000e-04,)] [eta: 3 days, 2:49:22, time (data): 42.011 (2.235)] l_g_pix: 2.0611e-02 l_g_percep: 4.3045e+00 l_g_gan: 2.8172e-01 l_d_real: 1.8287e-01 out_d_real: 3.8126e+00 l_d_fake: 2.2874e-01 out_d_fake: -2.5886e+00 
2024-04-15 06:52:44,017 INFO: [finet..][epoch:449, iter:   3,600, lr:(1.000e-04,)] [eta: 3 days, 1:42:04, time (data): 42.031 (2.235)] l_g_pix: 3.4065e-02 l_g_percep: 6.1491e+00 l_g_gan: 3.7430e-01 l_d_real: 1.8923e-01 out_d_real: 4.6078e+00 l_d_fake: 1.2847e-01 out_d_fake: -3.6134e+00 
2024-04-15 08:03:12,561 INFO: [finet..][epoch:462, iter:   3,700, lr:(1.000e-04,)] [eta: 3 days, 0:35:17, time (data): 42.116 (2.262)] l_g_pix: 3.9701e-02 l_g_percep: 7.3110e+00 l_g_gan: 3.6837e-01 l_d_real: 2.6272e-01 out_d_real: 3.9595e+00 l_d_fake: 1.1992e-01 out_d_fake: -3.5630e+00 
2024-04-15 09:13:23,083 INFO: [finet..][epoch:474, iter:   3,800, lr:(1.000e-04,)] [eta: 2 days, 23:27:50, time (data): 42.110 (2.235)] l_g_pix: 2.9515e-02 l_g_percep: 6.9935e+00 l_g_gan: 3.0520e-01 l_d_real: 2.8536e-01 out_d_real: 3.9447e+00 l_d_fake: 2.5617e-01 out_d_fake: -2.7963e+00 
2024-04-15 10:23:58,987 INFO: [finet..][epoch:487, iter:   3,900, lr:(1.000e-04,)] [eta: 2 days, 22:20:54, time (data): 42.214 (2.299)] l_g_pix: 5.9585e-02 l_g_percep: 7.3279e+00 l_g_gan: 3.8614e-01 l_d_real: 4.9507e-01 out_d_real: 3.1110e+00 l_d_fake: 8.3851e-02 out_d_fake: -3.7771e+00 
2024-04-15 11:34:18,177 INFO: [finet..][epoch:499, iter:   4,000, lr:(1.000e-04,)] [eta: 2 days, 21:13:21, time (data): 42.202 (2.281)] l_g_pix: 2.9188e-02 l_g_percep: 6.1197e+00 l_g_gan: 3.7041e-01 l_d_real: 9.2088e-02 out_d_real: 5.6038e+00 l_d_fake: 1.1372e-01 out_d_fake: -3.5886e+00 
2024-04-15 12:45:17,891 INFO: [finet..][epoch:512, iter:   4,100, lr:(1.000e-04,)] [eta: 2 days, 20:06:39, time (data): 42.542 (2.365)] l_g_pix: 1.6854e-02 l_g_percep: 5.3658e+00 l_g_gan: 4.3160e-01 l_d_real: 2.0729e-01 out_d_real: 4.6457e+00 l_d_fake: 7.6283e-02 out_d_fake: -4.2393e+00 
2024-04-15 13:56:31,863 INFO: [finet..][epoch:524, iter:   4,200, lr:(1.000e-04,)] [eta: 2 days, 19:00:05, time (data): 42.652 (2.301)] l_g_pix: 2.7096e-02 l_g_percep: 6.0068e+00 l_g_gan: 3.7173e-01 l_d_real: 2.2508e-01 out_d_real: 4.0327e+00 l_d_fake: 1.5272e-01 out_d_fake: -3.5648e+00 
2024-04-15 15:08:08,797 INFO: [finet..][epoch:537, iter:   4,300, lr:(1.000e-04,)] [eta: 2 days, 17:53:48, time (data): 42.782 (2.376)] l_g_pix: 4.5111e-02 l_g_percep: 6.4881e+00 l_g_gan: 3.0146e-01 l_d_real: 1.6782e-01 out_d_real: 4.3942e+00 l_d_fake: 1.7089e-01 out_d_fake: -2.8427e+00 
2024-04-15 16:19:10,659 INFO: [finet..][epoch:549, iter:   4,400, lr:(1.000e-04,)] [eta: 2 days, 16:46:31, time (data): 42.691 (2.308)] l_g_pix: 4.3822e-02 l_g_percep: 7.6482e+00 l_g_gan: 3.3981e-01 l_d_real: 7.8987e-02 out_d_real: 5.8982e+00 l_d_fake: 2.3367e-01 out_d_fake: -3.1632e+00 
2024-04-15 17:30:37,352 INFO: [finet..][epoch:562, iter:   4,500, lr:(1.000e-04,)] [eta: 2 days, 15:39:35, time (data): 42.835 (2.406)] l_g_pix: 5.2938e-02 l_g_percep: 7.0936e+00 l_g_gan: 3.2151e-01 l_d_real: 2.3601e-01 out_d_real: 3.9780e+00 l_d_fake: 3.7949e-01 out_d_fake: -2.8342e+00 
2024-04-15 18:41:47,848 INFO: [finet..][epoch:574, iter:   4,600, lr:(1.000e-04,)] [eta: 2 days, 14:32:08, time (data): 42.762 (2.336)] l_g_pix: 5.0879e-02 l_g_percep: 8.5409e+00 l_g_gan: 3.2462e-01 l_d_real: 1.5004e-01 out_d_real: 5.8426e+00 l_d_fake: 2.6980e-01 out_d_fake: -2.9757e+00 
2024-04-15 19:53:52,551 INFO: [finet..][epoch:587, iter:   4,700, lr:(1.000e-04,)] [eta: 2 days, 13:25:33, time (data): 43.347 (2.447)] l_g_pix: 3.8421e-02 l_g_percep: 6.0407e+00 l_g_gan: 3.6409e-01 l_d_real: 2.2132e-01 out_d_real: 4.1307e+00 l_d_fake: 1.0932e-01 out_d_fake: -3.5310e+00 
2024-04-15 21:05:28,928 INFO: [finet..][epoch:599, iter:   4,800, lr:(1.000e-04,)] [eta: 2 days, 12:18:13, time (data): 43.130 (2.324)] l_g_pix: 3.6712e-02 l_g_percep: 7.6211e+00 l_g_gan: 3.6519e-01 l_d_real: 1.7056e-01 out_d_real: 4.8953e+00 l_d_fake: 1.1164e-01 out_d_fake: -3.5405e+00 
2024-04-15 22:17:43,940 INFO: [finet..][epoch:612, iter:   4,900, lr:(1.000e-04,)] [eta: 2 days, 11:11:23, time (data): 43.503 (2.485)] l_g_pix: 5.6006e-02 l_g_percep: 7.8070e+00 l_g_gan: 3.2110e-01 l_d_real: 2.7379e-01 out_d_real: 4.3034e+00 l_d_fake: 2.4869e-01 out_d_fake: -2.9609e+00 
2024-04-15 23:29:34,102 INFO: [finet..][epoch:624, iter:   5,000, lr:(1.000e-04,)] [eta: 2 days, 10:03:56, time (data): 43.275 (2.352)] l_g_pix: 3.9684e-02 l_g_percep: 7.5281e+00 l_g_gan: 3.6824e-01 l_d_real: 2.8900e-01 out_d_real: 3.5731e+00 l_d_fake: 1.5534e-01 out_d_fake: -3.5251e+00 
2024-04-15 23:29:34,105 INFO: Saving models and training states.
2024-04-16 00:41:22,644 INFO: [finet..][epoch:637, iter:   5,100, lr:(1.000e-04,)] [eta: 2 days, 8:56:16, time (data): 42.868 (2.276)] l_g_pix: 3.4767e-02 l_g_percep: 6.2323e+00 l_g_gan: 3.4455e-01 l_d_real: 3.7283e-01 out_d_real: 3.3363e+00 l_d_fake: 1.0212e-01 out_d_fake: -3.3430e+00 
2024-04-16 01:52:54,940 INFO: [finet..][epoch:649, iter:   5,200, lr:(1.000e-04,)] [eta: 2 days, 7:48:12, time (data): 42.900 (2.283)] l_g_pix: 2.9586e-02 l_g_percep: 6.4859e+00 l_g_gan: 4.3626e-01 l_d_real: 1.7921e-01 out_d_real: 4.9383e+00 l_d_fake: 6.2327e-02 out_d_fake: -4.2994e+00 
2024-04-16 03:04:48,760 INFO: [finet..][epoch:662, iter:   5,300, lr:(1.000e-04,)] [eta: 2 days, 6:40:19, time (data): 42.972 (2.296)] l_g_pix: 3.2788e-02 l_g_percep: 6.1444e+00 l_g_gan: 3.3669e-01 l_d_real: 2.3127e-01 out_d_real: 3.9050e+00 l_d_fake: 1.8164e-01 out_d_fake: -3.1846e+00 
2024-04-16 04:16:30,892 INFO: [finet..][epoch:674, iter:   5,400, lr:(1.000e-04,)] [eta: 2 days, 5:32:07, time (data): 43.000 (2.291)] l_g_pix: 5.7361e-02 l_g_percep: 8.6357e+00 l_g_gan: 2.5977e-01 l_d_real: 8.5986e-02 out_d_real: 5.3288e+00 l_d_fake: 4.1000e-01 out_d_fake: -2.1875e+00 
2024-04-16 05:28:33,562 INFO: [finet..][epoch:687, iter:   5,500, lr:(1.000e-04,)] [eta: 2 days, 4:24:04, time (data): 43.085 (2.327)] l_g_pix: 2.9818e-02 l_g_percep: 6.7508e+00 l_g_gan: 1.9495e-01 l_d_real: 1.7450e-01 out_d_real: 5.1965e+00 l_d_fake: 4.5104e-01 out_d_fake: -1.4976e+00 
2024-04-16 06:40:17,527 INFO: [finet..][epoch:699, iter:   5,600, lr:(1.000e-04,)] [eta: 2 days, 3:15:39, time (data): 43.059 (2.280)] l_g_pix: 4.2251e-02 l_g_percep: 7.4275e+00 l_g_gan: 2.7394e-01 l_d_real: 2.1799e-01 out_d_real: 3.8323e+00 l_d_fake: 2.4391e-01 out_d_fake: -2.4943e+00 
2024-04-16 07:52:25,587 INFO: [finet..][epoch:712, iter:   5,700, lr:(1.000e-04,)] [eta: 2 days, 2:07:24, time (data): 43.182 (2.373)] l_g_pix: 2.9833e-02 l_g_percep: 6.1051e+00 l_g_gan: 2.9812e-01 l_d_real: 1.4940e-01 out_d_real: 4.5182e+00 l_d_fake: 1.9631e-01 out_d_fake: -2.7840e+00 
2024-04-16 09:04:16,358 INFO: [finet..][epoch:724, iter:   5,800, lr:(1.000e-04,)] [eta: 2 days, 0:58:49, time (data): 43.139 (2.309)] l_g_pix: 3.6877e-02 l_g_percep: 7.0293e+00 l_g_gan: 3.7849e-01 l_d_real: 4.9412e-01 out_d_real: 2.4330e+00 l_d_fake: 9.3413e-02 out_d_fake: -3.6903e+00 
2024-04-16 10:17:21,583 INFO: [finet..][epoch:737, iter:   5,900, lr:(1.000e-04,)] [eta: 1 day, 23:50:58, time (data): 43.919 (2.382)] l_g_pix: 3.8651e-02 l_g_percep: 6.7309e+00 l_g_gan: 3.0799e-01 l_d_real: 1.8035e-01 out_d_real: 4.9629e+00 l_d_fake: 1.9222e-01 out_d_fake: -2.8875e+00 
2024-04-16 11:29:36,231 INFO: [finet..][epoch:749, iter:   6,000, lr:(1.000e-04,)] [eta: 1 day, 22:42:24, time (data): 43.584 (2.340)] l_g_pix: 2.8757e-02 l_g_percep: 5.7328e+00 l_g_gan: 3.7311e-01 l_d_real: 2.1573e-01 out_d_real: 3.7288e+00 l_d_fake: 1.0914e-01 out_d_fake: -3.6218e+00 
2024-04-16 12:41:58,330 INFO: [finet..][epoch:762, iter:   6,100, lr:(1.000e-04,)] [eta: 1 day, 21:33:47, time (data): 43.398 (2.435)] l_g_pix: 4.3561e-02 l_g_percep: 7.4696e+00 l_g_gan: 3.3269e-01 l_d_real: 5.4693e-02 out_d_real: 6.3045e+00 l_d_fake: 1.7490e-01 out_d_fake: -3.1510e+00 
2024-04-16 13:54:39,990 INFO: [finet..][epoch:774, iter:   6,200, lr:(1.000e-04,)] [eta: 1 day, 20:25:15, time (data): 43.527 (2.339)] l_g_pix: 3.8334e-02 l_g_percep: 6.8783e+00 l_g_gan: 3.8749e-01 l_d_real: 1.4794e-01 out_d_real: 4.8868e+00 l_d_fake: 1.6223e-01 out_d_fake: -3.7118e+00 
2024-04-16 15:04:38,179 INFO: [finet..][epoch:787, iter:   6,300, lr:(1.000e-04,)] [eta: 1 day, 19:14:59, time (data): 41.976 (2.375)] l_g_pix: 3.2643e-02 l_g_percep: 6.8453e+00 l_g_gan: 2.8934e-01 l_d_real: 7.9762e-02 out_d_real: 5.6632e+00 l_d_fake: 2.1974e-01 out_d_fake: -2.6728e+00 
2024-04-16 16:14:06,038 INFO: [finet..][epoch:799, iter:   6,400, lr:(1.000e-04,)] [eta: 1 day, 18:04:27, time (data): 41.800 (2.263)] l_g_pix: 3.6934e-02 l_g_percep: 6.6873e+00 l_g_gan: 3.3271e-01 l_d_real: 2.8584e-01 out_d_real: 3.2598e+00 l_d_fake: 1.6004e-01 out_d_fake: -3.1665e+00 
2024-04-16 17:23:50,837 INFO: [finet..][epoch:812, iter:   6,500, lr:(1.000e-04,)] [eta: 1 day, 16:54:05, time (data): 41.896 (2.420)] l_g_pix: 2.8910e-02 l_g_percep: 6.1651e+00 l_g_gan: 4.0573e-01 l_d_real: 4.2286e-01 out_d_real: 2.9481e+00 l_d_fake: 8.5161e-02 out_d_fake: -3.9706e+00 
2024-04-16 18:33:15,234 INFO: [finet..][epoch:824, iter:   6,600, lr:(1.000e-04,)] [eta: 1 day, 15:43:34, time (data): 41.746 (2.286)] l_g_pix: 2.2610e-02 l_g_percep: 5.5387e+00 l_g_gan: 3.4326e-01 l_d_real: 1.1828e-01 out_d_real: 5.2619e+00 l_d_fake: 1.1908e-01 out_d_fake: -3.3123e+00 
2024-04-16 19:45:59,866 INFO: [finet..][epoch:837, iter:   6,700, lr:(1.000e-04,)] [eta: 1 day, 14:34:44, time (data): 43.465 (2.247)] l_g_pix: 5.2433e-02 l_g_percep: 7.7053e+00 l_g_gan: 3.6775e-01 l_d_real: 1.7498e-01 out_d_real: 4.7910e+00 l_d_fake: 1.0758e-01 out_d_fake: -3.5681e+00 
2024-04-16 20:55:31,919 INFO: [finet..][epoch:849, iter:   6,800, lr:(1.000e-04,)] [eta: 1 day, 13:24:16, time (data): 42.420 (2.232)] l_g_pix: 3.8159e-02 l_g_percep: 7.7078e+00 l_g_gan: 3.1285e-01 l_d_real: 8.7807e-02 out_d_real: 5.9823e+00 l_d_fake: 2.0644e-01 out_d_fake: -2.9205e+00 
2024-04-16 22:05:05,873 INFO: [finet..][epoch:862, iter:   6,900, lr:(1.000e-04,)] [eta: 1 day, 12:13:51, time (data): 41.518 (2.206)] l_g_pix: 2.4467e-02 l_g_percep: 5.5020e+00 l_g_gan: 3.7857e-01 l_d_real: 2.5839e-01 out_d_real: 3.8126e+00 l_d_fake: 1.2295e-01 out_d_fake: -3.6622e+00 
2024-04-16 23:12:50,701 INFO: [finet..][epoch:874, iter:   7,000, lr:(1.000e-04,)] [eta: 1 day, 11:02:41, time (data): 40.994 (2.197)] l_g_pix: 4.2226e-02 l_g_percep: 7.6172e+00 l_g_gan: 2.2071e-01 l_d_real: 1.5454e-01 out_d_real: 5.7474e+00 l_d_fake: 4.6828e-01 out_d_fake: -1.7377e+00 
2024-04-17 00:18:44,588 INFO: [finet..][epoch:887, iter:   7,100, lr:(1.000e-04,)] [eta: 1 day, 9:50:51, time (data): 39.381 (2.251)] l_g_pix: 3.7710e-02 l_g_percep: 5.8315e+00 l_g_gan: 2.9605e-01 l_d_real: 2.0568e-01 out_d_real: 4.9344e+00 l_d_fake: 2.0777e-01 out_d_fake: -2.7519e+00 
2024-04-17 01:24:14,573 INFO: [finet..][epoch:899, iter:   7,200, lr:(1.000e-04,)] [eta: 1 day, 8:39:01, time (data): 39.332 (2.216)] l_g_pix: 2.5762e-02 l_g_percep: 5.7701e+00 l_g_gan: 3.3852e-01 l_d_real: 1.6070e-01 out_d_real: 4.6371e+00 l_d_fake: 1.3767e-01 out_d_fake: -3.2461e+00 
2024-04-17 02:30:02,697 INFO: [finet..][epoch:912, iter:   7,300, lr:(1.000e-04,)] [eta: 1 day, 7:27:29, time (data): 39.395 (2.287)] l_g_pix: 2.2546e-02 l_g_percep: 5.4063e+00 l_g_gan: 3.5513e-01 l_d_real: 1.7712e-01 out_d_real: 4.6309e+00 l_d_fake: 1.2819e-01 out_d_fake: -3.4220e+00 
2024-04-17 03:35:32,032 INFO: [finet..][epoch:924, iter:   7,400, lr:(1.000e-04,)] [eta: 1 day, 6:15:59, time (data): 39.333 (2.225)] l_g_pix: 2.3361e-02 l_g_percep: 6.0238e+00 l_g_gan: 2.9293e-01 l_d_real: 2.5710e-01 out_d_real: 4.1344e+00 l_d_fake: 2.1715e-01 out_d_fake: -2.7118e+00 
2024-04-17 04:41:21,981 INFO: [finet..][epoch:937, iter:   7,500, lr:(1.000e-04,)] [eta: 1 day, 5:04:46, time (data): 39.428 (2.331)] l_g_pix: 3.4082e-02 l_g_percep: 5.7926e+00 l_g_gan: 3.2966e-01 l_d_real: 2.9814e-01 out_d_real: 3.0851e+00 l_d_fake: 1.7346e-01 out_d_fake: -3.1220e+00 
2024-04-17 05:46:54,550 INFO: [finet..][epoch:949, iter:   7,600, lr:(1.000e-04,)] [eta: 1 day, 3:53:36, time (data): 39.365 (2.255)] l_g_pix: 2.4408e-02 l_g_percep: 5.8735e+00 l_g_gan: 3.5702e-01 l_d_real: 2.0676e-01 out_d_real: 4.1097e+00 l_d_fake: 9.6569e-02 out_d_fake: -3.4722e+00 
2024-04-17 06:52:44,166 INFO: [finet..][epoch:962, iter:   7,700, lr:(1.000e-04,)] [eta: 1 day, 2:42:40, time (data): 39.463 (2.342)] l_g_pix: 2.6246e-02 l_g_percep: 5.5617e+00 l_g_gan: 2.6383e-01 l_d_real: 1.3645e-01 out_d_real: 4.5134e+00 l_d_fake: 2.7811e-01 out_d_fake: -2.3591e+00 
2024-04-17 07:58:13,436 INFO: [finet..][epoch:974, iter:   7,800, lr:(1.000e-04,)] [eta: 1 day, 1:31:46, time (data): 39.358 (2.245)] l_g_pix: 3.7032e-02 l_g_percep: 6.8111e+00 l_g_gan: 3.7636e-01 l_d_real: 1.8900e-01 out_d_real: 4.6921e+00 l_d_fake: 1.3568e-01 out_d_fake: -3.6269e+00 
2024-04-17 09:04:00,717 INFO: [finet..][epoch:987, iter:   7,900, lr:(1.000e-04,)] [eta: 1 day, 0:21:05, time (data): 39.489 (2.366)] l_g_pix: 2.3031e-02 l_g_percep: 5.1987e+00 l_g_gan: 3.5524e-01 l_d_real: 1.7099e-01 out_d_real: 4.5392e+00 l_d_fake: 9.2667e-02 out_d_fake: -3.4590e+00 
2024-04-17 10:09:30,542 INFO: [finet..][epoch:999, iter:   8,000, lr:(1.000e-04,)] [eta: 23:10:26, time (data): 39.371 (2.255)] l_g_pix: 2.4236e-02 l_g_percep: 5.5512e+00 l_g_gan: 3.2004e-01 l_d_real: 1.8809e-01 out_d_real: 4.0435e+00 l_d_fake: 1.9236e-01 out_d_fake: -3.0081e+00 
2024-04-17 11:15:19,366 INFO: [finet..][epoch:1012, iter:   8,100, lr:(1.000e-04,)] [eta: 22:00:00, time (data): 39.567 (2.439)] l_g_pix: 3.1636e-02 l_g_percep: 6.6366e+00 l_g_gan: 3.7663e-01 l_d_real: 2.2439e-01 out_d_real: 4.3793e+00 l_d_fake: 1.0621e-01 out_d_fake: -3.6567e+00 
2024-04-17 12:20:49,093 INFO: [finet..][epoch:1024, iter:   8,200, lr:(1.000e-04,)] [eta: 20:49:37, time (data): 39.398 (2.284)] l_g_pix: 3.8897e-02 l_g_percep: 7.6114e+00 l_g_gan: 3.4528e-01 l_d_real: 2.0209e-01 out_d_real: 4.8257e+00 l_d_fake: 1.3238e-01 out_d_fake: -3.3193e+00 
2024-04-17 13:26:39,698 INFO: [finet..][epoch:1037, iter:   8,300, lr:(1.000e-04,)] [eta: 19:39:25, time (data): 39.270 (2.162)] l_g_pix: 5.2977e-02 l_g_percep: 6.7235e+00 l_g_gan: 2.5631e-01 l_d_real: 1.0338e-01 out_d_real: 4.8016e+00 l_d_fake: 3.3162e-01 out_d_fake: -2.2312e+00 
2024-04-17 14:32:11,924 INFO: [finet..][epoch:1049, iter:   8,400, lr:(1.000e-04,)] [eta: 18:29:15, time (data): 39.303 (2.181)] l_g_pix: 3.0535e-02 l_g_percep: 6.6064e+00 l_g_gan: 3.1188e-01 l_d_real: 1.1346e-01 out_d_real: 4.9856e+00 l_d_fake: 1.7995e-01 out_d_fake: -2.9377e+00 
2024-04-17 15:39:47,816 INFO: [finet..][epoch:1062, iter:   8,500, lr:(1.000e-04,)] [eta: 17:19:34, time (data): 40.373 (2.316)] l_g_pix: 4.0073e-02 l_g_percep: 6.5432e+00 l_g_gan: 3.1898e-01 l_d_real: 9.6731e-02 out_d_real: 5.3407e+00 l_d_fake: 2.3302e-01 out_d_fake: -2.9556e+00 
2024-04-17 16:44:51,062 INFO: [finet..][epoch:1074, iter:   8,600, lr:(1.000e-04,)] [eta: 16:09:31, time (data): 39.524 (2.247)] l_g_pix: 4.6931e-02 l_g_percep: 7.9025e+00 l_g_gan: 2.5568e-01 l_d_real: 1.1697e-01 out_d_real: 5.7180e+00 l_d_fake: 3.2917e-01 out_d_fake: -2.2276e+00 
2024-04-17 17:50:41,988 INFO: [finet..][epoch:1087, iter:   8,700, lr:(1.000e-04,)] [eta: 14:59:42, time (data): 39.098 (2.290)] l_g_pix: 3.0951e-02 l_g_percep: 6.3986e+00 l_g_gan: 3.4456e-01 l_d_real: 2.1541e-01 out_d_real: 3.7563e+00 l_d_fake: 1.5060e-01 out_d_fake: -3.2942e+00 
2024-04-17 18:55:40,596 INFO: [finet..][epoch:1099, iter:   8,800, lr:(1.000e-04,)] [eta: 13:49:51, time (data): 39.027 (2.227)] l_g_pix: 3.9085e-02 l_g_percep: 7.3024e+00 l_g_gan: 2.9432e-01 l_d_real: 1.3183e-01 out_d_real: 5.1094e+00 l_d_fake: 2.1792e-01 out_d_fake: -2.7247e+00 
2024-04-17 20:01:08,452 INFO: [finet..][epoch:1112, iter:   8,900, lr:(1.000e-04,)] [eta: 12:40:11, time (data): 39.037 (2.234)] l_g_pix: 4.7453e-02 l_g_percep: 7.2802e+00 l_g_gan: 4.1369e-01 l_d_real: 1.4599e-01 out_d_real: 4.6477e+00 l_d_fake: 9.5351e-02 out_d_fake: -4.0392e+00 
2024-04-17 20:03:35,247 INFO: End of training. Time consumed: 4 days, 6:43:18
2024-04-17 20:03:35,247 INFO: Save the latest model.
