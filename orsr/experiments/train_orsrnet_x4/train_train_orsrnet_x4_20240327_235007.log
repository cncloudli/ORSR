2024-03-27 23:50:07,648 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 2.2.1+cu121
	TorchVision: 0.17.1+cpu
2024-03-27 23:50:07,649 INFO: 
  name: train_orsrnet_x4
  model_type: RealESRNetModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  gt_usm: True
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.15, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 30]
  poisson_scale_range: [0.05, 3]
  gray_noise_prob: 0.4
  jpeg_range: [30, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 25]
  poisson_scale_range2: [0.05, 2.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [30, 95]
  gt_size: 256
  queue_size: 180
  datasets:[
    train:[
      name: train
      type: RealESRGANDataset
      dataroot_gt: datasets/train
      meta_info: datasets/train/meta_info/meta_info_train.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 21
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.1
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 21
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.1
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.8
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 5
      batch_size_per_gpu: 12
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
  ]
  path:[
    pretrain_network_g: D:\fp\ORSR\experiments\train_orsrnet_x4\models\net_g_75000.pth
    param_key_g: params
    strict_load_g: True
    resume_state: experiments\train_orsrnet_x4\training_states\75000.state
    experiments_root: D:\fp\ORSR\experiments\train_orsrnet_x4
    models: D:\fp\ORSR\experiments\train_orsrnet_x4\models
    training_states: D:\fp\ORSR\experiments\train_orsrnet_x4\training_states
    log: D:\fp\ORSR\experiments\train_orsrnet_x4
    visualization: D:\fp\ORSR\experiments\train_orsrnet_x4\visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [100000]
      gamma: 0.5
    ]
    total_iter: 100000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: True
  is_train: True
  root_path: D:\fp\ORSR

2024-03-27 23:50:07,843 INFO: Dataset [RealESRGANDataset] - train is built.
2024-03-27 23:50:07,843 INFO: Training statistics:
	Number of train images: 17250
	Dataset enlarge ratio: 1
	Batch size per gpu: 12
	World size (gpu number): 1
	Require iter number per epoch: 1438
	Total epochs: 70; iters: 100000.
2024-03-27 23:50:08,064 INFO: Network [RRDBNet] is created.
2024-03-27 23:50:08,126 INFO: Network: RRDBNet, with parameters: 16,697,987
2024-03-27 23:50:08,126 INFO: RRDBNet(
  (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2024-03-27 23:50:08,373 INFO: Loading RRDBNet model from D:\fp\ORSR\experiments\train_orsrnet_x4\models\net_g_75000.pth, with param key: [params].
2024-03-27 23:50:08,455 INFO: Use Exponential Moving Average with decay: 0.999
2024-03-27 23:50:08,662 INFO: Network [RRDBNet] is created.
2024-03-27 23:50:08,790 INFO: Loading RRDBNet model from D:\fp\ORSR\experiments\train_orsrnet_x4\models\net_g_75000.pth, with param key: [params_ema].
2024-03-27 23:50:08,876 INFO: Loss [L1Loss] is created.
2024-03-27 23:50:08,903 INFO: Model [RealESRNetModel] is created.
2024-03-27 23:50:08,911 INFO: Resuming training from epoch: 51, iter: 75000.
2024-03-27 23:50:22,188 INFO: Start training from epoch: 51, iter: 75000
2024-03-27 23:55:17,365 INFO: [train..][epoch: 51, iter:  75,100, lr:(1.000e-04,)] [eta: 21:07:21, time (data): 2.952 (0.151)] l_pix: 8.5212e-02 
2024-03-27 23:59:10,418 INFO: [train..][epoch: 51, iter:  75,200, lr:(1.000e-04,)] [eta: 18:33:29, time (data): 2.641 (0.077)] l_pix: 9.7958e-02 
2024-03-28 00:03:05,044 INFO: [train..][epoch: 51, iter:  75,300, lr:(1.000e-04,)] [eta: 17:41:26, time (data): 2.347 (0.003)] l_pix: 8.7606e-02 
2024-03-28 00:06:59,317 INFO: [train..][epoch: 51, iter:  75,400, lr:(1.000e-04,)] [eta: 17:13:02, time (data): 2.345 (0.003)] l_pix: 7.6603e-02 
2024-03-28 00:10:54,088 INFO: [train..][epoch: 51, iter:  75,500, lr:(1.000e-04,)] [eta: 16:54:49, time (data): 2.347 (0.003)] l_pix: 1.0172e-01 
2024-03-28 00:14:48,943 INFO: [train..][epoch: 51, iter:  75,600, lr:(1.000e-04,)] [eta: 16:41:25, time (data): 2.348 (0.003)] l_pix: 8.0784e-02 
2024-03-28 00:18:43,324 INFO: [train..][epoch: 51, iter:  75,700, lr:(1.000e-04,)] [eta: 16:30:27, time (data): 2.344 (0.003)] l_pix: 7.8292e-02 
2024-03-28 00:22:37,716 INFO: [train..][epoch: 51, iter:  75,800, lr:(1.000e-04,)] [eta: 16:21:15, time (data): 2.344 (0.003)] l_pix: 1.1259e-01 
2024-03-28 00:26:31,927 INFO: [train..][epoch: 51, iter:  75,900, lr:(1.000e-04,)] [eta: 16:13:09, time (data): 2.343 (0.003)] l_pix: 8.4942e-02 
2024-03-28 00:30:26,132 INFO: [train..][epoch: 51, iter:  76,000, lr:(1.000e-04,)] [eta: 16:05:52, time (data): 2.342 (0.003)] l_pix: 6.7780e-02 
2024-03-28 00:34:20,549 INFO: [train..][epoch: 51, iter:  76,100, lr:(1.000e-04,)] [eta: 15:59:18, time (data): 2.346 (0.003)] l_pix: 7.6502e-02 
2024-03-28 00:38:16,072 INFO: [train..][epoch: 51, iter:  76,200, lr:(1.000e-04,)] [eta: 15:53:31, time (data): 2.351 (0.003)] l_pix: 6.9514e-02 
2024-03-28 00:42:10,910 INFO: [train..][epoch: 51, iter:  76,300, lr:(1.000e-04,)] [eta: 15:47:50, time (data): 2.348 (0.003)] l_pix: 6.8449e-02 
2024-03-28 00:46:04,500 INFO: [train..][epoch: 51, iter:  76,400, lr:(1.000e-04,)] [eta: 15:42:02, time (data): 2.342 (0.003)] l_pix: 6.3030e-02 
2024-03-28 00:50:14,480 INFO: [train..][epoch: 52, iter:  76,500, lr:(1.000e-04,)] [eta: 15:40:47, time (data): 2.512 (0.169)] l_pix: 7.1426e-02 
2024-03-28 00:54:10,295 INFO: [train..][epoch: 52, iter:  76,600, lr:(1.000e-04,)] [eta: 15:35:42, time (data): 2.432 (0.083)] l_pix: 7.6043e-02 
2024-03-28 00:58:02,753 INFO: [train..][epoch: 52, iter:  76,700, lr:(1.000e-04,)] [eta: 15:30:00, time (data): 2.323 (0.003)] l_pix: 8.0930e-02 
2024-03-28 01:01:52,426 INFO: [train..][epoch: 52, iter:  76,800, lr:(1.000e-04,)] [eta: 15:23:54, time (data): 2.310 (0.003)] l_pix: 9.0590e-02 
2024-03-28 01:05:41,970 INFO: [train..][epoch: 52, iter:  76,900, lr:(1.000e-04,)] [eta: 15:18:01, time (data): 2.297 (0.003)] l_pix: 8.2181e-02 
2024-03-28 01:09:31,518 INFO: [train..][epoch: 52, iter:  77,000, lr:(1.000e-04,)] [eta: 15:12:20, time (data): 2.296 (0.003)] l_pix: 8.7015e-02 
2024-03-28 01:13:20,541 INFO: [train..][epoch: 52, iter:  77,100, lr:(1.000e-04,)] [eta: 15:06:44, time (data): 2.291 (0.003)] l_pix: 8.2999e-02 
2024-03-28 01:17:10,756 INFO: [train..][epoch: 52, iter:  77,200, lr:(1.000e-04,)] [eta: 15:01:30, time (data): 2.297 (0.003)] l_pix: 9.5638e-02 
2024-03-28 01:21:00,328 INFO: [train..][epoch: 52, iter:  77,300, lr:(1.000e-04,)] [eta: 14:56:17, time (data): 2.296 (0.003)] l_pix: 7.2340e-02 
2024-03-28 01:24:49,927 INFO: [train..][epoch: 52, iter:  77,400, lr:(1.000e-04,)] [eta: 14:51:11, time (data): 2.296 (0.003)] l_pix: 8.4118e-02 
2024-03-28 01:28:38,872 INFO: [train..][epoch: 52, iter:  77,500, lr:(1.000e-04,)] [eta: 14:46:06, time (data): 2.289 (0.003)] l_pix: 8.9148e-02 
2024-03-28 01:32:27,780 INFO: [train..][epoch: 52, iter:  77,600, lr:(1.000e-04,)] [eta: 14:41:06, time (data): 2.289 (0.003)] l_pix: 7.5298e-02 
2024-03-28 01:36:17,365 INFO: [train..][epoch: 52, iter:  77,700, lr:(1.000e-04,)] [eta: 14:36:16, time (data): 2.298 (0.003)] l_pix: 1.0190e-01 
2024-03-28 01:40:07,086 INFO: [train..][epoch: 52, iter:  77,800, lr:(1.000e-04,)] [eta: 14:31:33, time (data): 2.297 (0.003)] l_pix: 8.7348e-02 
2024-03-28 01:44:12,500 INFO: [train..][epoch: 53, iter:  77,900, lr:(1.000e-04,)] [eta: 14:28:52, time (data): 2.479 (0.180)] l_pix: 7.8748e-02 
2024-03-28 01:48:01,648 INFO: [train..][epoch: 53, iter:  78,000, lr:(1.000e-04,)] [eta: 14:24:07, time (data): 2.378 (0.085)] l_pix: 6.8189e-02 
2024-03-28 01:51:51,524 INFO: [train..][epoch: 53, iter:  78,100, lr:(1.000e-04,)] [eta: 14:19:30, time (data): 2.298 (0.003)] l_pix: 8.2724e-02 
2024-03-28 01:55:41,335 INFO: [train..][epoch: 53, iter:  78,200, lr:(1.000e-04,)] [eta: 14:14:56, time (data): 2.298 (0.003)] l_pix: 1.0199e-01 
2024-03-28 01:59:30,565 INFO: [train..][epoch: 53, iter:  78,300, lr:(1.000e-04,)] [eta: 14:10:20, time (data): 2.293 (0.003)] l_pix: 8.1370e-02 
2024-03-28 02:03:19,864 INFO: [train..][epoch: 53, iter:  78,400, lr:(1.000e-04,)] [eta: 14:05:48, time (data): 2.293 (0.003)] l_pix: 9.5888e-02 
2024-03-28 02:07:09,324 INFO: [train..][epoch: 53, iter:  78,500, lr:(1.000e-04,)] [eta: 14:01:20, time (data): 2.298 (0.003)] l_pix: 6.7599e-02 
2024-03-28 02:10:58,687 INFO: [train..][epoch: 53, iter:  78,600, lr:(1.000e-04,)] [eta: 13:56:52, time (data): 2.296 (0.003)] l_pix: 8.1815e-02 
2024-03-28 02:14:48,908 INFO: [train..][epoch: 53, iter:  78,700, lr:(1.000e-04,)] [eta: 13:52:32, time (data): 2.301 (0.003)] l_pix: 8.3852e-02 
2024-03-28 02:18:39,322 INFO: [train..][epoch: 53, iter:  78,800, lr:(1.000e-04,)] [eta: 13:48:15, time (data): 2.303 (0.003)] l_pix: 7.7147e-02 
2024-03-28 02:22:28,753 INFO: [train..][epoch: 53, iter:  78,900, lr:(1.000e-04,)] [eta: 13:43:53, time (data): 2.295 (0.003)] l_pix: 8.4966e-02 
2024-03-28 02:26:17,566 INFO: [train..][epoch: 53, iter:  79,000, lr:(1.000e-04,)] [eta: 13:39:30, time (data): 2.291 (0.003)] l_pix: 8.4545e-02 
2024-03-28 02:30:07,297 INFO: [train..][epoch: 53, iter:  79,100, lr:(1.000e-04,)] [eta: 13:35:14, time (data): 2.293 (0.003)] l_pix: 6.7858e-02 
2024-03-28 02:33:56,239 INFO: [train..][epoch: 53, iter:  79,200, lr:(1.000e-04,)] [eta: 13:30:54, time (data): 2.291 (0.003)] l_pix: 6.1578e-02 
2024-03-28 02:37:45,812 INFO: [train..][epoch: 53, iter:  79,300, lr:(1.000e-04,)] [eta: 13:26:39, time (data): 2.295 (0.003)] l_pix: 7.0129e-02 
2024-03-28 02:41:50,537 INFO: [train..][epoch: 54, iter:  79,400, lr:(1.000e-04,)] [eta: 13:23:37, time (data): 2.380 (0.088)] l_pix: 1.0139e-01 
2024-03-28 02:45:39,567 INFO: [train..][epoch: 54, iter:  79,500, lr:(1.000e-04,)] [eta: 13:19:19, time (data): 2.291 (0.003)] l_pix: 8.9208e-02 
2024-03-28 02:49:28,543 INFO: [train..][epoch: 54, iter:  79,600, lr:(1.000e-04,)] [eta: 13:15:03, time (data): 2.290 (0.003)] l_pix: 7.7178e-02 
2024-03-28 02:53:46,404 INFO: [train..][epoch: 54, iter:  79,700, lr:(1.000e-04,)] [eta: 13:12:53, time (data): 2.662 (0.003)] l_pix: 8.8107e-02 
2024-03-28 02:58:39,675 INFO: [train..][epoch: 54, iter:  79,800, lr:(1.000e-04,)] [eta: 13:13:07, time (data): 2.815 (0.003)] l_pix: 9.2273e-02 
2024-03-28 03:02:32,342 INFO: [train..][epoch: 54, iter:  79,900, lr:(1.000e-04,)] [eta: 13:08:59, time (data): 2.323 (0.002)] l_pix: 9.2515e-02 
2024-03-28 03:06:25,266 INFO: [train..][epoch: 54, iter:  80,000, lr:(1.000e-04,)] [eta: 13:04:53, time (data): 2.327 (0.002)] l_pix: 9.1755e-02 
2024-03-28 03:06:25,268 INFO: Saving models and training states.
2024-03-28 03:10:19,706 INFO: [train..][epoch: 54, iter:  80,100, lr:(1.000e-04,)] [eta: 13:00:54, time (data): 2.344 (0.002)] l_pix: 7.0111e-02 
2024-03-28 03:14:11,406 INFO: [train..][epoch: 54, iter:  80,200, lr:(1.000e-04,)] [eta: 12:56:44, time (data): 2.329 (0.003)] l_pix: 6.6170e-02 
2024-03-28 03:18:05,394 INFO: [train..][epoch: 54, iter:  80,300, lr:(1.000e-04,)] [eta: 12:52:43, time (data): 2.342 (0.002)] l_pix: 7.4459e-02 
2024-03-28 03:21:58,953 INFO: [train..][epoch: 54, iter:  80,400, lr:(1.000e-04,)] [eta: 12:48:41, time (data): 2.338 (0.002)] l_pix: 6.2324e-02 
2024-03-28 03:25:52,447 INFO: [train..][epoch: 54, iter:  80,500, lr:(1.000e-04,)] [eta: 12:44:40, time (data): 2.338 (0.003)] l_pix: 8.1757e-02 
2024-03-28 03:29:45,252 INFO: [train..][epoch: 54, iter:  80,600, lr:(1.000e-04,)] [eta: 12:40:36, time (data): 2.332 (0.003)] l_pix: 9.0848e-02 
2024-03-28 03:33:37,938 INFO: [train..][epoch: 54, iter:  80,700, lr:(1.000e-04,)] [eta: 12:36:32, time (data): 2.323 (0.002)] l_pix: 9.7322e-02 
2024-03-28 03:37:48,114 INFO: [train..][epoch: 55, iter:  80,800, lr:(1.000e-04,)] [eta: 12:33:26, time (data): 2.427 (0.092)] l_pix: 8.0461e-02 
2024-03-28 03:41:43,652 INFO: [train..][epoch: 55, iter:  80,900, lr:(1.000e-04,)] [eta: 12:29:31, time (data): 2.354 (0.003)] l_pix: 9.0909e-02 
2024-03-28 03:45:38,962 INFO: [train..][epoch: 55, iter:  81,000, lr:(1.000e-04,)] [eta: 12:25:35, time (data): 2.353 (0.003)] l_pix: 9.3003e-02 
2024-03-28 03:49:32,636 INFO: [train..][epoch: 55, iter:  81,100, lr:(1.000e-04,)] [eta: 12:21:34, time (data): 2.336 (0.003)] l_pix: 9.3523e-02 
2024-03-28 03:53:27,954 INFO: [train..][epoch: 55, iter:  81,200, lr:(1.000e-04,)] [eta: 12:17:38, time (data): 2.346 (0.003)] l_pix: 7.1457e-02 
2024-03-28 03:57:23,083 INFO: [train..][epoch: 55, iter:  81,300, lr:(1.000e-04,)] [eta: 12:13:42, time (data): 2.353 (0.003)] l_pix: 8.7143e-02 
2024-03-28 04:01:13,640 INFO: [train..][epoch: 55, iter:  81,400, lr:(1.000e-04,)] [eta: 12:09:32, time (data): 2.325 (0.003)] l_pix: 8.1964e-02 
2024-03-28 04:05:03,745 INFO: [train..][epoch: 55, iter:  81,500, lr:(1.000e-04,)] [eta: 12:05:22, time (data): 2.302 (0.003)] l_pix: 9.0112e-02 
2024-03-28 04:08:53,035 INFO: [train..][epoch: 55, iter:  81,600, lr:(1.000e-04,)] [eta: 12:01:10, time (data): 2.297 (0.003)] l_pix: 8.6354e-02 
2024-03-28 04:12:42,664 INFO: [train..][epoch: 55, iter:  81,700, lr:(1.000e-04,)] [eta: 11:57:00, time (data): 2.300 (0.003)] l_pix: 7.6376e-02 
2024-03-28 04:16:32,601 INFO: [train..][epoch: 55, iter:  81,800, lr:(1.000e-04,)] [eta: 11:52:51, time (data): 2.300 (0.003)] l_pix: 9.2062e-02 
2024-03-28 04:20:21,862 INFO: [train..][epoch: 55, iter:  81,900, lr:(1.000e-04,)] [eta: 11:48:41, time (data): 2.293 (0.003)] l_pix: 9.2792e-02 
2024-03-28 04:24:11,525 INFO: [train..][epoch: 55, iter:  82,000, lr:(1.000e-04,)] [eta: 11:44:32, time (data): 2.295 (0.003)] l_pix: 9.2599e-02 
2024-03-28 04:28:00,573 INFO: [train..][epoch: 55, iter:  82,100, lr:(1.000e-04,)] [eta: 11:40:23, time (data): 2.289 (0.003)] l_pix: 8.6444e-02 
2024-03-28 04:32:04,862 INFO: [train..][epoch: 56, iter:  82,200, lr:(1.000e-04,)] [eta: 11:36:51, time (data): 2.382 (0.093)] l_pix: 9.5168e-02 
2024-03-28 04:35:54,040 INFO: [train..][epoch: 56, iter:  82,300, lr:(1.000e-04,)] [eta: 11:32:43, time (data): 2.294 (0.003)] l_pix: 8.8363e-02 
2024-03-28 04:39:43,160 INFO: [train..][epoch: 56, iter:  82,400, lr:(1.000e-04,)] [eta: 11:28:34, time (data): 2.292 (0.003)] l_pix: 8.1043e-02 
2024-03-28 04:43:32,500 INFO: [train..][epoch: 56, iter:  82,500, lr:(1.000e-04,)] [eta: 11:24:27, time (data): 2.295 (0.003)] l_pix: 9.2567e-02 
2024-03-28 04:47:21,799 INFO: [train..][epoch: 56, iter:  82,600, lr:(1.000e-04,)] [eta: 11:20:20, time (data): 2.294 (0.003)] l_pix: 8.2885e-02 
2024-03-28 04:51:10,417 INFO: [train..][epoch: 56, iter:  82,700, lr:(1.000e-04,)] [eta: 11:16:12, time (data): 2.289 (0.003)] l_pix: 9.5375e-02 
2024-03-28 04:54:59,493 INFO: [train..][epoch: 56, iter:  82,800, lr:(1.000e-04,)] [eta: 11:12:05, time (data): 2.290 (0.003)] l_pix: 9.7738e-02 
2024-03-28 04:58:48,793 INFO: [train..][epoch: 56, iter:  82,900, lr:(1.000e-04,)] [eta: 11:07:59, time (data): 2.293 (0.003)] l_pix: 7.3441e-02 
2024-03-28 05:02:38,302 INFO: [train..][epoch: 56, iter:  83,000, lr:(1.000e-04,)] [eta: 11:03:55, time (data): 2.294 (0.003)] l_pix: 8.2986e-02 
2024-03-28 05:06:28,185 INFO: [train..][epoch: 56, iter:  83,100, lr:(1.000e-04,)] [eta: 10:59:51, time (data): 2.298 (0.003)] l_pix: 7.6339e-02 
2024-03-28 05:10:17,653 INFO: [train..][epoch: 56, iter:  83,200, lr:(1.000e-04,)] [eta: 10:55:47, time (data): 2.296 (0.003)] l_pix: 1.0543e-01 
2024-03-28 05:14:07,118 INFO: [train..][epoch: 56, iter:  83,300, lr:(1.000e-04,)] [eta: 10:51:43, time (data): 2.295 (0.003)] l_pix: 8.1885e-02 
2024-03-28 05:17:56,821 INFO: [train..][epoch: 56, iter:  83,400, lr:(1.000e-04,)] [eta: 10:47:40, time (data): 2.296 (0.003)] l_pix: 7.4447e-02 
2024-03-28 05:21:46,939 INFO: [train..][epoch: 56, iter:  83,500, lr:(1.000e-04,)] [eta: 10:43:38, time (data): 2.301 (0.003)] l_pix: 9.2837e-02 
2024-03-28 05:25:35,818 INFO: [train..][epoch: 56, iter:  83,600, lr:(1.000e-04,)] [eta: 10:39:34, time (data): 2.293 (0.003)] l_pix: 7.0270e-02 
2024-03-28 05:29:40,835 INFO: [train..][epoch: 57, iter:  83,700, lr:(1.000e-04,)] [eta: 10:36:01, time (data): 2.300 (0.003)] l_pix: 6.7456e-02 
2024-03-28 05:33:31,032 INFO: [train..][epoch: 57, iter:  83,800, lr:(1.000e-04,)] [eta: 10:31:59, time (data): 2.301 (0.003)] l_pix: 8.3701e-02 
2024-03-28 05:37:20,557 INFO: [train..][epoch: 57, iter:  83,900, lr:(1.000e-04,)] [eta: 10:27:57, time (data): 2.294 (0.003)] l_pix: 8.6753e-02 
2024-03-28 05:41:11,074 INFO: [train..][epoch: 57, iter:  84,000, lr:(1.000e-04,)] [eta: 10:23:57, time (data): 2.301 (0.003)] l_pix: 8.5943e-02 
2024-03-28 05:44:59,722 INFO: [train..][epoch: 57, iter:  84,100, lr:(1.000e-04,)] [eta: 10:19:53, time (data): 2.284 (0.003)] l_pix: 7.3836e-02 
2024-03-28 05:48:49,595 INFO: [train..][epoch: 57, iter:  84,200, lr:(1.000e-04,)] [eta: 10:15:53, time (data): 2.294 (0.003)] l_pix: 7.4447e-02 
2024-03-28 05:52:39,281 INFO: [train..][epoch: 57, iter:  84,300, lr:(1.000e-04,)] [eta: 10:11:52, time (data): 2.300 (0.003)] l_pix: 8.8240e-02 
2024-03-28 05:56:29,258 INFO: [train..][epoch: 57, iter:  84,400, lr:(1.000e-04,)] [eta: 10:07:51, time (data): 2.300 (0.003)] l_pix: 9.3431e-02 
2024-03-28 06:00:19,046 INFO: [train..][epoch: 57, iter:  84,500, lr:(1.000e-04,)] [eta: 10:03:51, time (data): 2.289 (0.003)] l_pix: 7.3242e-02 
2024-03-28 06:04:08,714 INFO: [train..][epoch: 57, iter:  84,600, lr:(1.000e-04,)] [eta: 9:59:51, time (data): 2.294 (0.003)] l_pix: 8.7708e-02 
2024-03-28 06:07:58,580 INFO: [train..][epoch: 57, iter:  84,700, lr:(1.000e-04,)] [eta: 9:55:51, time (data): 2.300 (0.003)] l_pix: 7.5878e-02 
2024-03-28 06:11:48,501 INFO: [train..][epoch: 57, iter:  84,800, lr:(1.000e-04,)] [eta: 9:51:51, time (data): 2.299 (0.003)] l_pix: 7.5218e-02 
2024-03-28 06:15:38,204 INFO: [train..][epoch: 57, iter:  84,900, lr:(1.000e-04,)] [eta: 9:47:52, time (data): 2.299 (0.003)] l_pix: 8.0197e-02 
2024-03-28 06:19:28,085 INFO: [train..][epoch: 57, iter:  85,000, lr:(1.000e-04,)] [eta: 9:43:52, time (data): 2.299 (0.003)] l_pix: 8.9676e-02 
2024-03-28 06:19:28,085 INFO: Saving models and training states.
2024-03-28 06:23:32,658 INFO: [train..][epoch: 58, iter:  85,100, lr:(1.000e-04,)] [eta: 9:40:15, time (data): 2.588 (0.299)] l_pix: 8.3315e-02 
2024-03-28 06:27:22,667 INFO: [train..][epoch: 58, iter:  85,200, lr:(1.000e-04,)] [eta: 9:36:16, time (data): 2.396 (0.101)] l_pix: 7.9568e-02 
2024-03-28 06:31:11,942 INFO: [train..][epoch: 58, iter:  85,300, lr:(1.000e-04,)] [eta: 9:32:16, time (data): 2.302 (0.003)] l_pix: 7.4829e-02 
2024-03-28 06:35:01,632 INFO: [train..][epoch: 58, iter:  85,400, lr:(1.000e-04,)] [eta: 9:28:17, time (data): 2.299 (0.003)] l_pix: 7.7211e-02 
2024-03-28 06:38:51,140 INFO: [train..][epoch: 58, iter:  85,500, lr:(1.000e-04,)] [eta: 9:24:18, time (data): 2.299 (0.003)] l_pix: 6.1795e-02 
2024-03-28 06:42:40,628 INFO: [train..][epoch: 58, iter:  85,600, lr:(1.000e-04,)] [eta: 9:20:19, time (data): 2.296 (0.003)] l_pix: 7.4874e-02 
2024-03-28 06:46:30,332 INFO: [train..][epoch: 58, iter:  85,700, lr:(1.000e-04,)] [eta: 9:16:20, time (data): 2.303 (0.003)] l_pix: 8.9628e-02 
2024-03-28 06:50:21,113 INFO: [train..][epoch: 58, iter:  85,800, lr:(1.000e-04,)] [eta: 9:12:23, time (data): 2.306 (0.003)] l_pix: 7.3749e-02 
2024-03-28 06:54:10,346 INFO: [train..][epoch: 58, iter:  85,900, lr:(1.000e-04,)] [eta: 9:08:25, time (data): 2.294 (0.003)] l_pix: 8.3623e-02 
2024-03-28 06:57:59,637 INFO: [train..][epoch: 58, iter:  86,000, lr:(1.000e-04,)] [eta: 9:04:26, time (data): 2.293 (0.003)] l_pix: 7.5960e-02 
2024-03-28 07:01:49,904 INFO: [train..][epoch: 58, iter:  86,100, lr:(1.000e-04,)] [eta: 9:00:29, time (data): 2.300 (0.003)] l_pix: 9.1351e-02 
2024-03-28 07:05:40,545 INFO: [train..][epoch: 58, iter:  86,200, lr:(1.000e-04,)] [eta: 8:56:32, time (data): 2.305 (0.003)] l_pix: 7.8780e-02 
2024-03-28 07:09:30,050 INFO: [train..][epoch: 58, iter:  86,300, lr:(1.000e-04,)] [eta: 8:52:34, time (data): 2.299 (0.003)] l_pix: 7.9539e-02 
2024-03-28 07:13:19,993 INFO: [train..][epoch: 58, iter:  86,400, lr:(1.000e-04,)] [eta: 8:48:37, time (data): 2.299 (0.003)] l_pix: 1.0287e-01 
2024-03-28 07:17:24,454 INFO: [train..][epoch: 59, iter:  86,500, lr:(1.000e-04,)] [eta: 8:44:57, time (data): 2.638 (0.351)] l_pix: 8.0164e-02 
2024-03-28 07:21:14,484 INFO: [train..][epoch: 59, iter:  86,600, lr:(1.000e-04,)] [eta: 8:41:00, time (data): 2.402 (0.107)] l_pix: 8.1094e-02 
2024-03-28 07:25:04,951 INFO: [train..][epoch: 59, iter:  86,700, lr:(1.000e-04,)] [eta: 8:37:03, time (data): 2.303 (0.003)] l_pix: 7.7776e-02 
2024-03-28 07:28:55,845 INFO: [train..][epoch: 59, iter:  86,800, lr:(1.000e-04,)] [eta: 8:33:07, time (data): 2.307 (0.003)] l_pix: 8.2684e-02 
2024-03-28 07:32:45,894 INFO: [train..][epoch: 59, iter:  86,900, lr:(1.000e-04,)] [eta: 8:29:11, time (data): 2.298 (0.003)] l_pix: 8.6540e-02 
2024-03-28 07:36:35,508 INFO: [train..][epoch: 59, iter:  87,000, lr:(1.000e-04,)] [eta: 8:25:13, time (data): 2.297 (0.003)] l_pix: 8.5321e-02 
2024-03-28 07:40:26,691 INFO: [train..][epoch: 59, iter:  87,100, lr:(1.000e-04,)] [eta: 8:21:18, time (data): 2.320 (0.003)] l_pix: 9.3234e-02 
2024-03-28 07:44:16,923 INFO: [train..][epoch: 59, iter:  87,200, lr:(1.000e-04,)] [eta: 8:17:22, time (data): 2.307 (0.003)] l_pix: 1.0121e-01 
2024-03-28 07:48:07,284 INFO: [train..][epoch: 59, iter:  87,300, lr:(1.000e-04,)] [eta: 8:13:26, time (data): 2.300 (0.003)] l_pix: 8.5963e-02 
2024-03-28 07:51:57,398 INFO: [train..][epoch: 59, iter:  87,400, lr:(1.000e-04,)] [eta: 8:09:30, time (data): 2.301 (0.003)] l_pix: 7.0312e-02 
2024-03-28 07:55:46,647 INFO: [train..][epoch: 59, iter:  87,500, lr:(1.000e-04,)] [eta: 8:05:33, time (data): 2.293 (0.003)] l_pix: 9.6925e-02 
2024-03-28 07:59:37,606 INFO: [train..][epoch: 59, iter:  87,600, lr:(1.000e-04,)] [eta: 8:01:37, time (data): 2.305 (0.003)] l_pix: 5.8775e-02 
2024-03-28 08:03:27,205 INFO: [train..][epoch: 59, iter:  87,700, lr:(1.000e-04,)] [eta: 7:57:41, time (data): 2.300 (0.003)] l_pix: 9.5256e-02 
2024-03-28 08:07:16,676 INFO: [train..][epoch: 59, iter:  87,800, lr:(1.000e-04,)] [eta: 7:53:45, time (data): 2.296 (0.003)] l_pix: 7.6522e-02 
2024-03-28 08:11:06,865 INFO: [train..][epoch: 59, iter:  87,900, lr:(1.000e-04,)] [eta: 7:49:49, time (data): 2.300 (0.003)] l_pix: 8.2831e-02 
2024-03-28 08:15:11,293 INFO: [train..][epoch: 60, iter:  88,000, lr:(1.000e-04,)] [eta: 7:46:06, time (data): 2.406 (0.113)] l_pix: 9.3473e-02 
2024-03-28 08:19:00,988 INFO: [train..][epoch: 60, iter:  88,100, lr:(1.000e-04,)] [eta: 7:42:10, time (data): 2.297 (0.003)] l_pix: 8.5669e-02 
2024-03-28 08:22:49,710 INFO: [train..][epoch: 60, iter:  88,200, lr:(1.000e-04,)] [eta: 7:38:13, time (data): 2.290 (0.003)] l_pix: 8.7212e-02 
2024-03-28 08:26:40,207 INFO: [train..][epoch: 60, iter:  88,300, lr:(1.000e-04,)] [eta: 7:34:18, time (data): 2.310 (0.003)] l_pix: 8.3251e-02 
2024-03-28 08:30:30,177 INFO: [train..][epoch: 60, iter:  88,400, lr:(1.000e-04,)] [eta: 7:30:23, time (data): 2.302 (0.003)] l_pix: 9.4327e-02 
2024-03-28 08:34:19,186 INFO: [train..][epoch: 60, iter:  88,500, lr:(1.000e-04,)] [eta: 7:26:26, time (data): 2.287 (0.003)] l_pix: 9.3319e-02 
2024-03-28 08:38:09,304 INFO: [train..][epoch: 60, iter:  88,600, lr:(1.000e-04,)] [eta: 7:22:31, time (data): 2.298 (0.003)] l_pix: 9.0660e-02 
2024-03-28 08:41:59,620 INFO: [train..][epoch: 60, iter:  88,700, lr:(1.000e-04,)] [eta: 7:18:36, time (data): 2.289 (0.003)] l_pix: 9.6571e-02 
2024-03-28 08:46:47,681 INFO: [train..][epoch: 60, iter:  88,800, lr:(1.000e-04,)] [eta: 7:15:28, time (data): 2.737 (0.003)] l_pix: 6.8450e-02 
2024-03-28 08:51:45,664 INFO: [train..][epoch: 60, iter:  88,900, lr:(1.000e-04,)] [eta: 7:12:26, time (data): 2.995 (0.003)] l_pix: 8.0252e-02 
2024-03-28 08:56:50,248 INFO: [train..][epoch: 60, iter:  89,000, lr:(1.000e-04,)] [eta: 7:09:28, time (data): 3.034 (0.003)] l_pix: 6.6676e-02 
2024-03-28 09:01:56,962 INFO: [train..][epoch: 60, iter:  89,100, lr:(1.000e-04,)] [eta: 7:06:30, time (data): 3.130 (0.003)] l_pix: 7.8164e-02 
2024-03-28 09:07:53,369 INFO: [train..][epoch: 60, iter:  89,200, lr:(1.000e-04,)] [eta: 7:04:07, time (data): 3.464 (0.003)] l_pix: 6.4696e-02 
2024-03-28 09:15:41,495 INFO: [train..][epoch: 60, iter:  89,300, lr:(1.000e-04,)] [eta: 7:03:05, time (data): 7.310 (0.003)] l_pix: 7.6361e-02 
2024-03-28 09:25:29,774 INFO: [train..][epoch: 61, iter:  89,400, lr:(1.000e-04,)] [eta: 7:03:27, time (data): 6.204 (0.123)] l_pix: 8.8255e-02 
2024-03-28 09:29:21,815 INFO: [train..][epoch: 61, iter:  89,500, lr:(1.000e-04,)] [eta: 6:59:21, time (data): 2.330 (0.003)] l_pix: 7.0554e-02 
2024-03-28 09:33:13,330 INFO: [train..][epoch: 61, iter:  89,600, lr:(1.000e-04,)] [eta: 6:55:16, time (data): 2.318 (0.003)] l_pix: 7.9727e-02 
2024-03-28 09:37:04,856 INFO: [train..][epoch: 61, iter:  89,700, lr:(1.000e-04,)] [eta: 6:51:11, time (data): 2.315 (0.003)] l_pix: 7.5199e-02 
2024-03-28 09:40:57,288 INFO: [train..][epoch: 61, iter:  89,800, lr:(1.000e-04,)] [eta: 6:47:06, time (data): 2.322 (0.003)] l_pix: 6.9917e-02 
2024-03-28 09:44:48,664 INFO: [train..][epoch: 61, iter:  89,900, lr:(1.000e-04,)] [eta: 6:43:01, time (data): 2.334 (0.003)] l_pix: 8.0163e-02 
2024-03-28 09:48:40,374 INFO: [train..][epoch: 61, iter:  90,000, lr:(1.000e-04,)] [eta: 6:38:56, time (data): 2.321 (0.003)] l_pix: 8.1330e-02 
2024-03-28 09:48:40,374 INFO: Saving models and training states.
2024-03-28 09:52:32,815 INFO: [train..][epoch: 61, iter:  90,100, lr:(1.000e-04,)] [eta: 6:34:53, time (data): 2.327 (0.003)] l_pix: 8.1595e-02 
2024-03-28 09:56:25,043 INFO: [train..][epoch: 61, iter:  90,200, lr:(1.000e-04,)] [eta: 6:30:49, time (data): 2.323 (0.003)] l_pix: 7.5007e-02 
2024-03-28 10:00:16,372 INFO: [train..][epoch: 61, iter:  90,300, lr:(1.000e-04,)] [eta: 6:26:44, time (data): 2.310 (0.003)] l_pix: 8.7684e-02 
2024-03-28 10:04:08,652 INFO: [train..][epoch: 61, iter:  90,400, lr:(1.000e-04,)] [eta: 6:22:41, time (data): 2.320 (0.003)] l_pix: 8.2776e-02 
2024-03-28 10:08:00,478 INFO: [train..][epoch: 61, iter:  90,500, lr:(1.000e-04,)] [eta: 6:18:37, time (data): 2.332 (0.003)] l_pix: 6.7024e-02 
2024-03-28 10:11:52,988 INFO: [train..][epoch: 61, iter:  90,600, lr:(1.000e-04,)] [eta: 6:14:34, time (data): 2.326 (0.003)] l_pix: 9.9083e-02 
2024-03-28 10:15:44,766 INFO: [train..][epoch: 61, iter:  90,700, lr:(1.000e-04,)] [eta: 6:10:30, time (data): 2.307 (0.003)] l_pix: 9.1579e-02 
2024-03-28 10:19:36,608 INFO: [train..][epoch: 61, iter:  90,800, lr:(1.000e-04,)] [eta: 6:06:27, time (data): 2.316 (0.003)] l_pix: 8.8660e-02 
2024-03-28 10:23:41,799 INFO: [train..][epoch: 62, iter:  90,900, lr:(1.000e-04,)] [eta: 6:02:32, time (data): 2.283 (0.003)] l_pix: 8.0076e-02 
2024-03-28 10:27:30,307 INFO: [train..][epoch: 62, iter:  91,000, lr:(1.000e-04,)] [eta: 5:58:27, time (data): 2.285 (0.003)] l_pix: 9.3186e-02 
2024-03-28 10:31:19,034 INFO: [train..][epoch: 62, iter:  91,100, lr:(1.000e-04,)] [eta: 5:54:22, time (data): 2.269 (0.003)] l_pix: 7.6973e-02 
2024-03-28 10:35:08,305 INFO: [train..][epoch: 62, iter:  91,200, lr:(1.000e-04,)] [eta: 5:50:18, time (data): 2.289 (0.003)] l_pix: 8.2059e-02 
